<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!--
 Based on UPGRADING from PHP 5.6.0 beta 1. Work in progress!

 As we're still in alpha at the moment, I've only included relatively minimal
 information here, and haven't updated the rest of the manual for 5.6 features
 yet. Once we're well into betas/RCs and features are frozen, the information
 in this appendix should be expanded and the new functionality integrated into
 the rest of the manual.
-->

<appendix xml:id="migration56" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Migrating from PHP 5.5.x to PHP 5.6.x</title>
 <simpara>
  &manual.migration.seealso;
  <link linkend="migration5">5.0.x</link>,
  <link linkend="migration51">5.1.x</link>,
  <link linkend="migration52">5.2.x</link>,
  <link linkend="migration53">5.3.x</link>,
  <link linkend="migration54">5.4.x</link> and
  <link linkend="migration55">5.5.x</link>.
 </simpara>

 <sect1 xml:id="migration56.changes">
  <title>What has changed in PHP 5.6.x</title>
  <warning>
   <simpara>
    PHP 5.6 is currently being tested, and the features and changes noted in
    this section are subject to change before the final 5.6.0 release. Please
    double check this migration guide before deploying a stable 5.6 release to
    production.
   </simpara>
  </warning>
  <simpara>
   Most improvements in PHP 5.6.x have no impact on existing code. There are
   a <link linkend="migration56.incompatible">few incompatibilities</link>
   and <link linkend="migration56.new-features">new features</link> that should
   be considered, and code should be tested before switching PHP
   versions in production environments.
  </simpara>
  <simpara>
   For systems being upgraded from an older version of PHP, the relevant
   documentation is available at:
  </simpara>
  <itemizedlist>
   <listitem>
    <simpara>
     <link linkend="migration55">Upgrade Notes for PHP 5.5.x</link>.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="migration54">Upgrade Notes for PHP 5.4.x</link>.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="migration53">Upgrade Notes for PHP 5.3.x</link>.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="migration52">Upgrade Notes for PHP 5.2.x</link>.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="migration51">Upgrade Notes for PHP 5.1.x</link>.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="migration5">Migrating from PHP 4 to PHP 5</link>.
    </simpara>
   </listitem>
  </itemizedlist>
 </sect1>

 <sect1 xml:id="migration56.incompatible">
  <title>Backward incompatible changes</title>
  <simpara>
   Although most existing PHP 5 code should work without changes, please take
   note of some backward incompatible changes:
  </simpara>

  <sect2 xml:id="migration56.incompatible.json-decode">
   <title><function>json_decode</function> strictness</title>

   <para>
    <function>json_decode</function> now rejects non-lowercase variants of the
    JSON literals <literal>true</literal>, <literal>false</literal> and
    <literal>null</literal> at all times, as per the JSON specification, and
    sets <function>json_last_error</function> accordingly. Previously, inputs
    to <function>json_decode</function> that consisted solely of one of these
    values in upper or mixed case were accepted.
   </para>

   <para>
    This change will only affect cases where invalid JSON was being passed to
    <function>json_decode</function>: valid JSON input is unaffected and will
    continue to be parsed normally.
   </para>
  </sect2>

  <sect2 xml:id="migration56.incompatible.peer-verification">
   <title>Stream wrappers now verify peer certificates and host names by default when using SSL/TLS</title>

   &migration56.openssl.peer-verification;
  </sect2>

  <sect2 xml:id="migration56.incompatible.gmp">
   <title><link linkend="book.gmp">GMP</link> resources are now objects</title>

   <para>
    <link linkend="book.gmp">GMP</link> resources are now objects. The
    functional API implemented in the GMP extension has not changed, and code
    should run modified unless it checks explicitly for a resource using
    <function>is_resource</function> or similar.
   </para>
  </sect2>

  <sect2 xml:id="migration56.incompatible.mcrypt">
   <title><link linkend="book.mcrypt">Mcrypt</link> functions now require valid keys and IVs</title>

   <para>
    <function>mcrypt_encrypt</function>, <function>mcrypt_decrypt</function>,
    <function>mcrypt_cbc</function>, <function>mcrypt_cfb</function>,
    <function>mcrypt_ecb</function>, <function>mcrypt_generic</function> and
    <function>mcrypt_ofb</function> will no longer accept keys or IVs with
    incorrect sizes, and block cipher modes that require IVs will now fail if
    an IV isn't provided.
   </para>
  </sect2>
 </sect1>

 <sect1 xml:id="migration56.new-features">
  <title>New features</title>

  <sect2 xml:id="migration56.new-features.const-scalar-exprs">
   <title>Constant scalar expressions</title>

   <para>
    It is now possible to provide a scalar expression involving numeric and
    string literals and/or constants in contexts where PHP previously expected
    a static value, such as constant and property declarations and default
    function arguments.
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
const ONE = 1;
const TWO = ONE * 2;

class C {
    const THREE = TWO + 1;
    const ONE_THIRD = ONE / self::THREE;
    const SENTENCE = 'The value of THREE is '.self::THREE;

    public function f($a = ONE + self::THREE) {
        return $a;
    }
}

echo (new C)->f()."\n";
echo C::SENTENCE;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
4
The value of THREE is 3
]]>
    </screen>
   </informalexample>
  </sect2>

  <sect2 xml:id="migration56.new-features.variadics">
   <title>Variadic functions via <literal>...</literal></title>

   <para>
    <link linkend="functions.variable-arg-list">Variadic functions</link> can
    now be implemented using the <literal>...</literal> operator, instead of
    relying on <function>func_get_args</function>.
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function f($req, $opt = null, ...$params) {
    // $params is an array containing the remaining arguments.
    printf('$req: %d; $opt: %d; number of params: %d'."\n",
           $req, $opt, count($params));
}

f(1);
f(1, 2);
f(1, 2, 3);
f(1, 2, 3, 4);
f(1, 2, 3, 4, 5);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
$req: 1; $opt: 0; number of params: 0
$req: 1; $opt: 2; number of params: 0
$req: 1; $opt: 2; number of params: 1
$req: 1; $opt: 2; number of params: 2
$req: 1; $opt: 2; number of params: 3
]]>
    </screen>
   </informalexample>
  </sect2>

  <sect2 xml:id="migration56.new-features.splat">
   <title>Argument unpacking via <literal>...</literal></title>

   <para>
    <link linkend="language.types.array">Arrays</link> and
    <interfacename>Traversable</interfacename> objects can be unpacked into
    argument lists when calling functions by using the <literal>...</literal>
    operator. This is also known as the splat operator in other languages,
    including Ruby.
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function add($a, $b, $c) {
    return $a + $b + $c;
}

$operators = [2, 3];
echo add(1, ...$operators);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
6
]]>
    </screen>
   </informalexample>
  </sect2>

  <sect2 xml:id="migration56.new-features.exponentiation">
   <title>Exponentiation via <literal>**</literal></title>

   <para>
    A right associative <literal>**</literal> operator has been added to
    support exponentiation, along with a <literal>**=</literal> shorthand
    assignment operator.
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
printf("2 ** 3 ==      %d\n", 2 ** 3);
printf("2 ** 3 ** 2 == %d\n", 2 ** 3 ** 2);

$a = 2;
$a **= 3;
printf("a ==           %d\n", $a);
?>
]]>
    </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
2 ** 3 ==      8
2 ** 3 ** 2 == 512
a ==           8
]]>
   </screen>
   </informalexample>
  </sect2>

  <sect2 xml:id="migration56.new-features.use">
   <title><literal>use function</literal> and <literal>use const</literal></title>

   <para>
    The
    <link linkend="language.namespaces.importing"><literal>use</literal></link> 
    operator has been extended to support importing functions and constants in
    addition to classes. This is achieved via the
    <literal>use function</literal> and <literal>use const</literal>
    constructs, respectively.
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
namespace Name\Space {
    const FOO = 42;
    function f() { echo __FUNCTION__."\n"; }
}

namespace {
    use const Name\Space\FOO;
    use function Name\Space\f;

    echo FOO."\n";
    f();
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
42
Name\Space\f
]]>
    </screen>
   </informalexample>
  </sect2>

  <sect2 xml:id="migration56.new-features.phpdbg">
   <title>phpdbg</title>

   <para>
    PHP now includes an interactive debugger called phpdbg implemented as a
    SAPI module. For more information, please visit the
    <link xlink:href="&url.phpdbg.docs;">phpdbg documentation</link>.
   </para>
  </sect2>

  <sect2 xml:id="migration56.new-features.default-encoding">
   <title>Default character encoding</title>

   <para>
    <link linkend="ini.default-charset">default_charset</link> is now used as
    the default character set for functions that are encoding-specific, such
    as <function>htmlspecialchars</function>. Note that if the (now
    deprecated) iconv and mbstring encoding settings are set, they will take
    precedence over default_charset.
   </para>

   <para>
    The default value for this setting is <literal>UTF-8</literal>.
   </para>
  </sect2>

  <sect2 xml:id="migration56.new-features.reusable-input">
   <title><link linkend="wrappers.php.input"><literal>php://input</literal></link> is reusable</title>

   <para>
    <link linkend="wrappers.php.input"><literal>php://input</literal></link>
    may now be reopened and read as many times as required. This work has also
    resulted in a major reduction in the amount of memory required to deal
    with POST data.
   </para>
  </sect2>

  <sect2 xml:id="migration56.new-features.large-file">
   <title>Large file uploads</title>

   <para>
    Files larger than 2 gigabytes in size are now accepted.
   </para>
  </sect2>

  <sect2 xml:id="migration56.new-features.gmp">
   <title><link linkend="book.gmp">GMP</link> supports operator overloading</title>

   <para>
    <link linkend="book.gmp">GMP</link> objects now support operator
    overloading and casting to scalar types. This allows for more expressive
    code using GMP:
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$a = gmp_init(42);
$b = gmp_init(17);
 
// Pre-5.6 code:
var_dump(gmp_add($a, $b));
var_dump(gmp_add($a, 17));
var_dump(gmp_add(42, $b));

// New code:
var_dump($a + $b);
var_dump($a + 17);
var_dump(42 + $b);
?>
]]>
    </programlisting>
   </informalexample>
  </sect2>

  <sect2 xml:id="migration56.new-features.hash-equals">
   <title><function>hash_equals</function> for timing attack safe string comparison</title>

   <para>
    The <function>hash_equals</function> function has been added to compare
    two strings in constant time. This should be used to mitigate timing
    attacks; for instance, when testing <function>crypt</function> password
    hashes (assuming that you are unable to use
    <function>password_hash</function> and
    <function>password_verify</function>, which aren't susceptible to timing
    attacks).
   </para>

   <!-- TODO: update crypt() examples -->

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$expected  = crypt('12345', '$2a$07$usesomesillystringforsalt$');
$correct   = crypt('12345', '$2a$07$usesomesillystringforsalt$');
$incorrect = crypt('1234',  '$2a$07$usesomesillystringforsalt$');

var_dump(hash_equals($expected, $correct));
var_dump(hash_equals($expected, $incorrect));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
bool(false)
]]>
    </screen>
   </informalexample>
  </sect2>

  <sect2 xml:id="migration56.new-features.gost">
   <title>gost-crypto hash algorithm</title>

   <para>
    The <literal>gost-crypto</literal> hash algorithm has been added. This
    implements the GOST hash function using the CryptoPro S-box tables as
    specified by
    <link xlink:href="&url.rfc;4357">RFC 4357, section 11.2</link>.
   </para>
  </sect2>

  <sect2 xml:id="migration56.new-features.openssl">
   <title>SSL/TLS improvements</title>

   <para>
    A wide range of improvements have been made to the SSL/TLS support in PHP
    5.6. These include
    <link linkend="migration56.incompatible.peer-verification">enabling peer verification by default</link>,
    supporting certificate fingerprint matching, mitigating against TLS
    renegotiation attacks, and many new
    <link linkend="context.ssl">SSL context options</link> to allow more fine
    grained control over protocol and verification settings when using
    encrypted streams.
   </para>

   <para>
    These changes are described in more detail in the
    <link linkend="migration56.openssl">OpenSSL changes in PHP 5.6.x</link>
    section of this migration guide.
   </para>
  </sect2>

  <!-- TODO: async PostgreSQL, PCRE marks -->
 </sect1>

 <sect1 xml:id="migration56.deprecated">
  <title>Deprecated features in PHP 5.6.x</title>

  <sect2 xml:id="migration56.deprecated.incompatible-context">
   <title>Calls from incompatible context</title>

   <para>
    Methods called from an incompatible context are now deprecated, and will
    generate <constant>E_DEPRECATED</constant> errors when invoked instead of
    <constant>E_STRICT</constant>. Support for these calls will be removed in
    a future version of PHP.
   </para>

   <para>
    An example of such a call is:
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class A {
    function f() { echo get_class($this); }
}

class B {
    function f() { A::f(); }
}

(new B)->f();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Deprecated: Non-static method A::f() should not be called statically, assuming $this from incompatible context in - on line 7
B
]]>
    </screen>
   </informalexample>
  </sect2>

  <sect2 xml:id="migration56.deprecated.raw-post-data">
   <title><varname>$HTTP_RAW_POST_DATA</varname> and <link linkend="ini.always-populate-raw-post-data">always_populate_raw_post_data</link></title>

   <para>
    <link linkend="ini.always-populate-raw-post-data">always_populate_raw_post_data</link>
    will now generate an <constant>E_DEPRECATED</constant> error when enabled.
    New code should use
    <link linkend="wrappers.php.input"><literal>php://input</literal></link>
    instead of <varname>$HTTP_RAW_POST_DATA</varname>, which will be removed
    in a future release. You can opt in for the new behaviour (in which
    <varname>$HTTP_RAW_POST_DATA</varname> is never defined) by setting
    <link linkend="ini.always-populate-raw-post-data">always_populate_raw_post_data</link>
    to <literal>-1</literal>.
   </para>
  </sect2>

  <!-- TODO: anything since alpha 1 -->
 </sect1>

 <sect1 xml:id="migration56.changed-functions">
  <title>Changed functions</title>

  <sect2 xml:id="migration56.changed-functions.core">
   <title>PHP Core</title>

   <itemizedlist>
    <listitem>
     <simpara>
      <function>crypt</function> will now raise an
      <constant>E_NOTICE</constant> error if the <parameter>salt</parameter>
      parameter is omitted.
     </simpara>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="migration56.changed-functions.curl">
   <title><link linkend="book.curl">cURL</link></title>

   <itemizedlist>
    <listitem>
     <simpara>
      Uploads using the <literal>@file</literal> syntax are now only supported
      if the <constant>CURLOPT_SAFE_UPLOAD</constant> option is set to
      &false;. <classname>CURLFile</classname> should be used instead.
     </simpara>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="migration56.changed-functions.xmlreader">
   <title><link linkend="book.xmlreader">XMLReader</link></title>

   <itemizedlist>
    <listitem>
     <simpara>
      <methodname>XMLReader::getAttributeNs</methodname> and
      <methodname>XMLReader::getAttributeNo</methodname> now return &null; if
      the attribute could not be found, like
      <methodname>XMLReader::getAttribute</methodname>.
     </simpara>
    </listitem>
   </itemizedlist>
  </sect2>

  <!-- TODO: anything since alpha 1 -->
 </sect1>

 <sect1 xml:id="migration56.new-functions">
  <title>New functions</title>

  <sect2 xml:id="migration56.new-functions.gmp">
   <title><link linkend="book.gmp">GMP</link></title>

   <itemizedlist>
    <listitem>
     <simpara>
      <function>gmp_root</function>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>gmp_rootrem</function>
     </simpara>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="migration56.new-functions.ldap">
   <title><link linkend="book.ldap">LDAP</link></title>

   <itemizedlist>
    <listitem>
     <simpara>
      <function>ldap_escape</function>
     </simpara>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="migration56.new-functions.oci8">
   <title><link linkend="book.oci8">OCI8</link></title>

   <itemizedlist>
    <listitem>
     <simpara>
      <function>oci_get_implicit_resultset</function>
     </simpara>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="migration56.new-functions.openssl">
   <title><link linkend="book.openssl">OpenSSL</link></title>

   <itemizedlist>
    <listitem>
     <simpara>
      <function>openssl_x509_fingerprint</function>
     </simpara>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="migration56.new-functions.zip">
   <title><link linkend="book.zip">Zip</link></title>

   <itemizedlist>
    <listitem>
     <simpara>
      <methodname>ZipArchive::setPassword</methodname>
     </simpara>
    </listitem>
   </itemizedlist>
  </sect2>

  <!-- TODO: anything since alpha 1 -->
 </sect1>

 <sect1 xml:id="migration56.openssl">
  <title>OpenSSL changes in PHP 5.6.x</title>

  <sect2 xml:id="migration56.openssl.peer-verification">
   <title>Stream wrappers now verify peer certificates and host names by default when using SSL/TLS</title>

   &migration56.openssl.peer-verification;
  </sect2>

  <sect2 xml:id="migration56.openssl.fingerprint">
   <title>Certificate fingerprints</title>

   <para>
    Support has been added for extracting and verifying certificate
    fingerprints. <function>openssl_x509_fingerprint</function> has been added
    to extract a fingerprint from an X.509 certificate, and two
    <link linkend="context.ssl">SSL stream context</link> options have been
    added: <literal>capture_peer_cert</literal> to capture the peer's X.509
    certificate, and <literal>peer_fingerprint</literal> to assert that the
    peer's certificate should match the given fingerprint.
   </para>
  </sect2>

  <sect2 xml:id="migration56.openssl.ciphers">
   <title>Default ciphers updated</title>

   <para>
    The default ciphers used by PHP have been updated to a more secure list
    based on the
    <link xlink:href="&url.openssl.ciphers.mozilla;">Mozilla cipher recommendations</link>,
    with two additional exclusions: anonymous Diffie-Hellman ciphers, and RC4.
   </para>

   <para>
    This list can be accessed via the new
    <constant>OPENSSL_DEFAULT_STREAM_CIPHERS</constant> constant, and can be
    overridden (as in previous PHP versions) by setting the
    <link linkend="context.ssl.ciphers"><parameter>ciphers</parameter></link>
    context option.
   </para>
  </sect2>

  <sect2 xml:id="migration56.openssl.tls-compression">
   <title>Compression disabled by default</title>

   <para>
    SSL/TLS compression has been disabled by default to mitigate the CRIME
    attack. PHP 5.4.13 added a
    <link linkend="context.ssl.disable-compression"><parameter>disable_compression</parameter></link>
    context option to allow compression to be disabled: this is now set to
    &true; (that is, compression is disabled) by default.
   </para>
  </sect2>

  <sect2 xml:id="migration56.openssl.honor-cipher-order">
   <title>Allow servers to prefer their cipher order</title>

   <para>
    The <parameter>honor_cipher_order</parameter> SSL context option has been
    added to allow encrypted stream servers to mitigate BEAST vulnerabilities
    by preferring the server's ciphers to the client's.
   </para>
  </sect2>

  <sect2 xml:id="migration56.openssl.metadata">
   <title>Access the negotiated protocol and cipher</title>

   <para>
    The protocol and cipher that were negotiated for an encrypted stream can
    now be accessed via <function>stream_get_meta_data</function> or
    <function>stream_context_get_options</function> when the
    <parameter>capture_session_meta</parameter> SSL context option is set to
    &true;.
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$ctx = stream_context_create(['ssl' => [
    'capture_session_meta' => TRUE
]]);
 
$html = file_get_contents('https://google.com/', FALSE, $ctx);
$meta = stream_context_get_options($ctx)['ssl']['session_meta'];
var_dump($meta);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(4) {
  ["protocol"]=>
  string(5) "TLSv1"
  ["cipher_name"]=>
  string(20) "ECDHE-RSA-AES128-SHA"
  ["cipher_bits"]=>
  int(128)
  ["cipher_version"]=>
  string(11) "TLSv1/SSLv3"
}
]]>
    </screen>
   </informalexample>
  </sect2>

  <sect2 xml:id="migration56.openssl.forward-secrecy">
   <title>New options for perfect forward secrecy in encrypted stream servers</title>

   <para>
    Encrypted client streams already support perfect forward secrecy, as it is
    generally controlled by the server. PHP encrypted server streams using
    certificates capable of perfect forward secrecy do not need to take any
    additional action to enable PFS; however a number of new SSL context options
    have been added to allow more control over PFS and deal with any
    compatibility issues that may arise. 
   </para>

   <variablelist>
    <varlistentry>
     <term><parameter>ecdh_curve</parameter></term>
     <listitem>
      <para>
       This option allows the selection of a specific curve for use with ECDH
       ciphers. If not specified, <literal>prime256v1</literal> will be used.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>dh_param</parameter></term>
     <listitem>
      <para>
       A path to a file containing parametrs for Diffie-Hellman key exchange,
       such as that created by the following command:
      </para>
      <programlisting role="shell">
<![CDATA[
       openssl dhparam -out /path/to/my/certs/dh-2048.pem 2048
]]>
      </programlisting>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>single_dh_use</parameter></term>
     <listitem>
      <para>
       If set to &true;, a new key pair will be created when using
       Diffie-Hellman parameters, thereby improving forward secrecy.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>single_ecdh_use</parameter></term>
     <listitem>
      <para>
       If set to &true;, a new key pair will always be generated when ECDH
       cipher suites are negotiated. This improves forward secrecy.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="migration56.openssl.crypto-method">
   <title>SSL/TLS version selection</title>

   <para>
    It is now possible to select specific versions of SSL and TLS via the
    <parameter>crypto_method</parameter> SSL context option or by specifying a
    specific transport when creating a stream wrapper (for example, by calling
    <function>stream_socket_client</function> or
    <function>stream_socket_server</function>).
   </para>

   <para>
    The <parameter>crypto_method</parameter> SSL context option accepts a
    bitmask enumerating the protocols that are permitted, as does the
    <parameter>crypto_type</parameter> of
    <function>stream_socket_enable_crypto</function>.
    <!-- TODO: link to full list, which is too big for this page but should be
               in the crypto_method and stream_socket_enable_crypto()
               documentation. -->
   </para>

   <segmentedlist>
    <title>Selected protocol versions and corresponding options</title>
    <segtitle>Protocol(s)</segtitle>
    <segtitle>Client flag</segtitle>
    <segtitle>Server flag</segtitle>
    <segtitle>Transport</segtitle>
    <seglistitem>
     <seg>Any TLS or SSL version</seg>
     <seg><constant>STREAM_CRYPTO_METHOD_ANY_CLIENT</constant></seg>
     <seg><constant>STREAM_CRYPTO_METHOD_ANY_SERVER</constant></seg>
     <seg><literal>ssl://</literal></seg>
    </seglistitem>
    <seglistitem>
     <seg>Any TLS version</seg>
     <seg><constant>STREAM_CRYPTO_METHOD_TLS_CLIENT</constant></seg>
     <seg><constant>STREAM_CRYPTO_METHOD_TLS_SERVER</constant></seg>
     <seg><literal>tls://</literal></seg>
    </seglistitem>
    <seglistitem>
     <seg>TLS 1.0</seg>
     <seg><constant>STREAM_CRYPTO_METHOD_TLSv_1_0_CLIENT</constant></seg>
     <seg><constant>STREAM_CRYPTO_METHOD_TLSv_1_0_SERVER</constant></seg>
     <seg><literal>tlsv1.0://</literal></seg>
    </seglistitem>
    <seglistitem>
     <seg>TLS 1.1</seg>
     <seg><constant>STREAM_CRYPTO_METHOD_TLSv_1_1_CLIENT</constant></seg>
     <seg><constant>STREAM_CRYPTO_METHOD_TLSv_1_1_SERVER</constant></seg>
     <seg><literal>tlsv1.1://</literal></seg>
    </seglistitem>
    <seglistitem>
     <seg>TLS 1.2</seg>
     <seg><constant>STREAM_CRYPTO_METHOD_TLSv_1_2_CLIENT</constant></seg>
     <seg><constant>STREAM_CRYPTO_METHOD_TLSv_1_2_SERVER</constant></seg>
     <seg><literal>tlsv1.2://</literal></seg>
    </seglistitem>
    <seglistitem>
     <seg>SSL 3</seg>
     <seg><constant>STREAM_CRYPTO_METHOD_SSLv3_CLIENT</constant></seg>
     <seg><constant>STREAM_CRYPTO_METHOD_SSLv3_SERVER</constant></seg>
     <seg><literal>sslv3://</literal></seg>
    </seglistitem>
   </segmentedlist>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php

// Requiring TLS 1.0 or better when using file_get_contents():
$ctx = stream_context_create([
  'ssl' => [
    'crypto_method' => STREAM_CRYPTO_METHOD_TLS_CLIENT,
  ],
]);
$html = file_get_contents('https://google.com/', false, $ctx);

// Requiring TLS 1.1 or 1.2:
$ctx = stream_context_create([
  'ssl' => [
    'crypto_method' => STREAM_CRYPTO_METHOD_TLSv_1_1_CLIENT |
                       STREAM_CRYPTO_METHOD_TLSv_1_2_CLIENT,
  ],
]);
$html = file_get_contents('https://google.com/', false, $ctx);

// Connecting using the tlsv1.2:// stream socket transport.
$sock = stream_socket_client('tlsv1.2://google.com:443/');

?>
]]>
    </programlisting>
   </informalexample>
  </sect2>

  <sect2 xml:id="migration56.openssl.default-certificate-paths">
   <title><function>openssl_get_cert_locations</function> added</title>

   <para>
    The <function>openssl_get_cert_locations</function> function has been
    added: it returns the default locations PHP will search when looking for
    CA bundles.
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(openssl_get_cert_locations());
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(8) {
  ["default_cert_file"]=>
  string(21) "/etc/pki/tls/cert.pem"
  ["default_cert_file_env"]=>
  string(13) "SSL_CERT_FILE"
  ["default_cert_dir"]=>
  string(18) "/etc/pki/tls/certs"
  ["default_cert_dir_env"]=>
  string(12) "SSL_CERT_DIR"
  ["default_private_dir"]=>
  string(20) "/etc/pki/tls/private"
  ["default_default_cert_area"]=>
  string(12) "/etc/pki/tls"
  ["ini_cafile"]=>
  string(0) ""
  ["ini_capath"]=>
  string(0) ""
}
]]>
    </screen>
   </informalexample>
  </sect2>
 </sect1>

 <sect1 xml:id="migration56.extensions-other">
  <title>Other changes to extensions</title>

  <sect2 xml:id="migration56.extensions-other.oci8">
   <title><link linkend="book.oci8">OCI8</link></title>

   <itemizedlist>
    <listitem>
     <simpara>
      Support for implicit result sets for Oracle Database 12c has been added
      via the new <function>oci_get_implicit_resultset</function> function.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Using <literal>oci_execute($s, OCI_NO_AUTO_COMMIT)</literal> for a
      SELECT no longer unnecessarily initiates an internal ROLLBACK during
      connection close.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Added DTrace probes controlled by the <literal>--enable-dtrace</literal>
      configure option.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>oci_internal_debug</function> is now a no-op.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      The <function>phpinfo</function> output format for OCI8 has changed.
     </simpara>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="migration56.extensions-other.zip">
   <title><link linkend="book.zip">Zip</link></title>

   <para>
    A <literal>--with-libzip</literal> configure option has been added to use
    a system libzip installation. libzip version 0.11 is required, with 0.11.2
    or later recommended.
   </para>
  </sect2>

  <!-- TODO: anything since alpha 1 -->
 </sect1>

 <sect1 xml:id="migration56.global-constants">
  <title>New global constants</title>

  <sect2 xml:id="migration56.global-constants.ldap">
   <title><link linkend="book.ldap">LDAP</link></title>

   <itemizedlist>
    <listitem>
     <simpara>
      <constant>LDAP_ESCAPE_DN</constant>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>LDAP_ESCAPE_FILTER</constant>
     </simpara>
    </listitem>
   </itemizedlist>
  </sect2>

  <!-- TODO: anything since alpha 1 -->
 </sect1>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
