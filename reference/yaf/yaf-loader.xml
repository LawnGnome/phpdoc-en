<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<phpdoc:classref xml:id="class.yaf-loader" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>The Yaf_Loader class</title>
 <titleabbrev>Yaf_Loader</titleabbrev>

 <partintro>

<!-- {{{ Yaf_Loader intro -->
  <section xml:id="yaf-loader.intro">
   &reftitle.intro;
   <para>
    <classname>Yaf_Loader</classname> introduces a comprehensive autoloading
    solution for Yaf.
   </para>
   <para>
    The first time an instance of <classname>Yaf_Application</classname> is retrieved, 
    <classname>Yaf_Loader</classname> will instance a singleton, and registers itself with
    spl_autoload.  You retrieve an instance using the <methodname>Yaf_Loader::getInstance</methodname>
   </para>

   <para>
    By default, <classname>Yaf_Loader</classname> assume all Class will store
    in the <link linkend="ini.yaf.library">global class
     directory</link>, which is defined in the php.ini(yaf.library).
   </para>

   <para>
    If you want <classname>Yaf_Loader</classname> search some Class in the
    <link linkend="yaf-loader.props.library">local class
     directory</link>(which is defined in application.ini, and by default,
    it is APPLICATION_PATH . "/libraray"), you should register the class prefix using the
    <methodname>Yaf_Loader::registerLocalNameSpace</methodname>
   </para>

   <para>
    <example>
     <title>Config example</title>
      <programlisting role="shell">
<![CDATA[
// Assuming the following configure in php.ini:
yaf.libraray = "/global_dir"

//Assuming the following configure in application.ini
application.libraray = APPLICATION_PATH "/library"
]]>
     </programlisting>
    </example>

    Assuming the following local name space registerd:
    <example>
     <title>Register localnamespace</title>
     <programlisting role="php">
<![CDATA[
<?php
class Bootstrap extends Yaf_Bootstrap_Abstract{
     public function _initLoader($dispatcher) {
          Yaf_Loader::getInstance()->registerLocalNameSpace(array("Foo", "Bar"));
     }
?>
]]>
     </programlisting>
    </example>

   Then the autoload examples:
    <example>
     <title>Load class example</title>
      <programlisting role="shell">
<![CDATA[
class Foo_Bar_Test =>
  // APPLICATION_PATH/library/Foo/Bar/Test.php
  
class GLO_Name  =>
  // /global_dir/Glo/Name.php
 
class BarNon_Test
  // /global_dir/Barnon/Test.php
]]>
      </programlisting>
    </example>

   As of PHP 5.3, you can use namespace:
   <example>
    <title>Load namespace class example</title>
    <programlisting role="shell">
<![CDATA[
class \Foo\Bar\Dummy =>
   // APPLICATION_PATH/library/Foo/Bar/Dummy.php

class \FooBar\Bar\Dummy =>
   // /global_dir/FooBar/Bar/Dummy.php
]]>
    </programlisting> 
   </example>
  </para>

  <para>
    You may noticed that all the folder wth the first letter capitalized, you can make them
    lowercase by set <link linkend="ini.yaf.lowcase-path">yaf.lowcase_path</link> = On in php.ini
  </para>

  <para>
   <classname>Yaf_Loader</classname> is also designed to load the MVC classes,
   and the rule is:
   <example>
    <title>MVC class loading example</title>
    <programlisting role="shell">
<![CDATA[
Controller Classes =>
// APPLICATION_PATH/controllers/

Model Classes =>
// APPLICATION_PATH/models/

Plugin Classes =>
// APPLICATION_PATH/plugins/
]]>
    </programlisting>
   </example>

   Yaf identify a class's suffix(this is by default, you can also change to
   the prefix by change the configure <link
    linkend="ini.yaf.name-suffix">yaf.name_suffix</link>) to decide whether it
   is a MVC class:
   <example>
    <title>MVC class distinctions</title>
   <programlisting role="shell">
<![CDATA[
Controller Classes =>
    // ***Controller

Model Classes =>
    // ***Model

Plugin Classes =>
    // ***Plugin
]]>
   </programlisting>
  </example>

   some examples:
   <example>
    <title>MVC loading example</title>
    <programlisting role="shell">
<![CDATA[
class IndexController
    // APPLICATION_PATH/controllers/Index.php

class DataModel =>
   // APPLICATION_PATH/models/Data.php

class DummyPlugin =>
  // APPLICATION_PATH/plugins/Dummy.php

class A_B_TestModel =>
  // APPLICATION_PATH/models/A/B/Test.php
]]>
    </programlisting>
  </example>

   also, the directory will be affected by <link linkend="ini.yaf.lowcase-path">yaf.lowcase_path</link>.
  </para>
  </section>
<!-- }}} -->

  <section xml:id="yaf-loader.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>Yaf_Loader</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>Yaf_Loader</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-loader.props.local-ns">_local_ns</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-loader.props.library">_library</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-loader.props.global-library">_global_library</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>static</modifier>
     <varname linkend="yaf-loader.props.instance">_instance</varname>
    </fieldsynopsis>

    
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.yaf-loader')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->

  </section>

  
<!-- {{{ Yaf_Loader properties -->
  <section xml:id="yaf-loader.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="yaf-loader.props.local-ns">
     <term><varname>_local_ns</varname></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-loader.props.library">
     <term><varname>_library</varname></term>
     <listitem>
      <para>
      By default, this value is APPLICATION_PATH . "/library", you can change
      this either in the application.ini(application.library) or call to
      <methodname>Yaf_Loader::setLibraryPath</methodname>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-loader.props.global-library">
     <term><varname>_global_library</varname></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-loader.props.instance">
     <term><varname>_instance</varname></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->


 </partintro>
 

 &reference.yaf.entities.yaf-loader;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
