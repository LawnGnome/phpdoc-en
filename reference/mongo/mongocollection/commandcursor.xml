<?xml version="1.0" encoding="utf-8"?>

<!-- $Revision: 332247 $ -->
<refentry xml:id="mongocollection.commandcursor" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::commandCursor</refname>
  <refpurpose>Execute a database command and retrieve results through a cursor</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>MongoCommandCursor</type><methodname>MongoCollection::commandCursor</methodname>
   <methodparam><type>array</type><parameter>command</parameter></methodparam>
  </methodsynopsis>
  <para>
   With this method you can execute commands and retrieve the results through
   a cursor, instead of getting just one document back as you would with
   <methodname>MongoDB::command</methodname>. This method returns a
   <classname>MongoCommandCursor</classname> object. This cursor object
   implements the <classname>Iterator</classname> interface just like the
   <classname>MongoCursor</classname> objects that are returned by the
   <methodname>MongoCollection::find</methodname> method.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>command</parameter>
     </term>
     <listitem>
      <para>
       The command query to send.
      </para>
      <para>
       It is possible to configure how many initial documents the server
       should return with the first result set. This configuration is made as
       part of the command query. The default initial batch size is
       <literal>101</literal>. You can change it by adding the
       <literal>cursor</literal> key in the following way to the command:
      </para>
      <programlisting role="php">
<![CDATA[
<?php
$collection->commandCursor( [
    "aggregate" => "collectionName",
    "pipeline" => [
        ...
    ],
    "cursor" => [ "batchSize" => 4 ],
] );
]]>
      </programlisting>
     </listitem>
     <para>
      If you do <emphasis>not</emphasis> set the initial
      <literal>batchSize</literal> option, then the PHP driver will implicitly
      add this for you with a value of <literal>101</literal>
     </para>
     <para>
      This setting does only configure the first batch size. To configure the
      size of future batches, please use the
      <methodname>MongoCommandCursor::batchSize</methodname> method on the
      returned <classname>MongoCommandCursor</classname> object.
     </para>
    </varlistentry>   
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;  
  <para>
   Returns a <classname>MongoCommandCursor</classname> object. Because this
   implements the <classname>Iterator</classname> interface you can 
   iterate over each of the results as returned by the command query. The
   <classname>MongoCommandCursor</classname> also implements the
   <classname>MongoCursorInterface</classname> interface which adds the
   <methodname>MongoCommandCursor::batchSize</methodname>,
   <methodname>MongoCommandCursor::dead</methodname>,
   <methodname>MongoCommandCursor::info</methodname> methods.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>MongoCollection::cursorCommand</function> "aggregate" example</title>
   <para>
    Finding all of the distinct values for a key.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$m = new MongoClient;
$db = $m->test;
$people = $db->people;
$people->drop();

$people->insert(array("name" => "Joe", "points" => 4));
$people->insert(array("name" => "Molly", "points" => 43));
$people->insert(array("name" => "Sally", "points" => 22));
$people->insert(array("name" => "Joe", "points" => 22));
$people->insert(array("name" => "Molly", "points" => 87));

$ages = $people->commandCursor( [
    "aggregate" => "people",
    "pipeline" => [
        [ '$group' => [ '_id' => '$name', 'points' => [ '$sum' => '$points' ] ] ],
        [ '$sort' => [ 'points' => -1 ] ],
    ]
] );

foreach ($ages as $person) {
    echo "{$person['_id']}: {$person['points']}\n";
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
Molly: 130
Joe: 26
Sally: 22
   </screen>
  </example>

  <example>
   <title><function>MongoCollection::cursorCommand</function> "aggregate"
   example with different initial batch size</title>
   <para>
    Finding all of the distinct values for a key.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$m = new MongoClient;
$db = $m->test;
$people = $db->people;
$people->drop();

/* Insert some sample data */
$people->insert(array("name" => "Joe", "points" => 4));
$people->insert(array("name" => "Molly", "points" => 43));
$people->insert(array("name" => "Sally", "points" => 22));
$people->insert(array("name" => "Joe", "points" => 22));
$people->insert(array("name" => "Molly", "points" => 87));

/* Run the command cursor */
$ages = $people->commandCursor( [
    "aggregate" => "people",
    "pipeline" => [
        [ '$group' => [ '_id' => '$name', 'points' => [ '$sum' => '$points' ] ] ],
        [ '$sort' => [ 'points' => -1 ] ],
    ],
    "cursor" => [ "batchSize" => 4 ],
] );

foreach ($ages as $person) {
    echo "{$person['_id']}: {$person['points']}\n";
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
Molly: 130
Joe: 26
Sally: 22
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>MongoDb::command</methodname></member>
    <member><classname>MongoCommandCursor</classname></member>
    <member><methodname>MongoCommandCursor::batchSize</methodname></member>
    <member><methodname>MongoCollection::aggregate</methodname></member>
    <member>The MongoDB <link xlink:href="&url.mongodb.docs.aggregation;">aggregation framework</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
