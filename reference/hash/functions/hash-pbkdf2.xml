<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 299488 $ -->

<refentry xml:id="function.func-name" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
   <refname>hash_pbkdf2</refname>
     <refpurpose>Generate a PBKDF2 key derivation of a supplied password</refpurpose>
  </refnamediv>

   <refsect1 role="description">
     &reftitle.description;
   <methodsynopsis role="procedural">
      <type>string</type><methodname>hash_pbkdf2</methodname>
     <methodparam><type>string</type><parameter>algo</parameter></methodparam>
    <methodparam><type>string</type><parameter>password</parameter></methodparam>
   <methodparam><type>string</type><parameter>salt</parameter></methodparam>
      <methodparam><type>int</type><parameter>iterations</parameter></methodparam>
     <methodparam choice="opt"><type>int</type><parameter>length</parameter><initializer>0</initializer></methodparam>
    <methodparam choice="opt"><type>bool</type><parameter>raw_output</parameter><initializer>false</initializer></methodparam>
  </methodsynopsis>
   </refsect1>

    <refsect1 role="parameters">
  &reftitle.parameters;
    <variablelist>
    <varlistentry>
     <term><parameter>algo</parameter></term>
      <listitem>
       <para>
        Name of selected hashing algorithm (i.e. "md5", "sha256", "haval160,4", etc..) See <function>hash_algos</function> for a list of supported algorithms.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
     <term><parameter>password</parameter></term>
     <listitem>
      <para>
        The password to use for the derivation.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>salt</parameter></term>
      <listitem>
       <para>
        The salt to use for the derivation.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><parameter>iterations</parameter></term>
      <listitem>
      <para>
        The number of internal iterations to perform for the derivation.
     </para>
     </listitem>
    </varlistentry>
   <varlistentry>
       <term><parameter>length</parameter></term>
       <listitem>
        <para>
      The length of the derived key to output. If "0", the length of the supplied algorithm is used.
       </para>
       </listitem>
      </varlistentry>
     <varlistentry>
     <term><parameter>raw_output</parameter></term>
     <listitem>
      <para>
        When set to &true;, outputs raw binary data.
      &false; outputs lowercase hexits.
       </para>
       </listitem>
      </varlistentry>
    </variablelist>
 </refsect1>

  <refsect1 role="returnvalues"><!-- {{{ -->
    &reftitle.returnvalues;
  <para>
     Returns a string containing the derived key as lowercase hexits
    unless <parameter>raw_output</parameter> is set to true in which case the raw
   binary representation of the derived key is returned.
     </para>
  </refsect1><!-- }}} -->

   <refsect1 role="errors"><!-- {{{ -->
     &reftitle.errors;
   <para>
      An E_WARNING will be raised if the algorithm is unknown, the iterations parameter is less than or equal to 0, 
     the length is less than 0 or the salt is too long (greater than INT_MAX - 4).
   </para>
    </refsect1><!-- }}} -->

 <refsect1 role="changelog"><!-- {{{ -->
   &reftitle.changelog;
     <informaltable>
    <tgroup cols="2">
    <thead>
     <row>
       <entry>&Version;</entry>
         <entry>&Description;</entry>
      </row>
      </thead>
      <tbody>
       <row>
         <entry>5.5.0</entry>
       <entry>
          Function added
        </entry>
     </row>
     </tbody>
    </tgroup>
  </informaltable>
   </refsect1><!-- }}} -->

    <refsect1 role="examples">
  &reftitle.examples;
    <para>
   <example>
       <title><function>hash_pbkdf2</function> example, basic usage</title>
       <programlisting role="php">
   <![CDATA[
   <?php
   $password = "password";
   $salt = "salt";
   $hash = hash_pbkdf2("sha256", $password, $salt, 1, 20);
   echo $hash;
   ?>
   ]]>
       </programlisting>
       &example.outputs;
       <screen>
   <![CDATA[
   120fb6cffcf8b32c43e7
   ]]>
       </screen>
      </example>
    </para>
 </refsect1>

  <refsect1 role="notes">
    &reftitle.notes;
  <caution>
     <para>
     The PBKDF2 method can be used for hashing passwords for storage (It is NIST approved for that use). 
     However, it should be noted that CRYPT_BLOWFISH is better suited for password storage and should
     be used instead.
    </para>
  </caution>
   </refsect1>

    <refsect1 role="seealso">
  &reftitle.seealso;
    <para>
   <simplelist>
       <member><function>crypt</function></member>
       <member><function>hash</function></member>
       <member><function>hash_algos</function></member>
       <member><function>hash_init</function></member>
       <member><function>hash_hmac</function></member>
       <member><function>hash_hmac_file</function></member>
      </simplelist>
    </para>
 </refsect1>

 </refentry>

 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"~/.phpdoc/manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
