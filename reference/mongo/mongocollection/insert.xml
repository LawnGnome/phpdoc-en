<?xml version="1.0" encoding="utf-8"?>

<!-- $Revision$ -->
<refentry xml:id="mongocollection.insert" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::insert</refname>
  <refpurpose>Inserts an array into the collection</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool|array</type><methodname>MongoCollection::insert</methodname>
   <methodparam><type>array</type><parameter>a</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
  <para>
   All strings sent to the database must be UTF-8.  If a string is not UTF-8, a 
   <classname>MongoException</classname> will be thrown.  To insert 
   (or query for) a non-UTF-8 string, use <classname>MongoBinData</classname>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>a</parameter>
     </term>
     <listitem>
      <para>
       An array.
      </para>
     </listitem>
    </varlistentry>   
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       Options for the insert.
       <itemizedlist>
        <listitem>
         <para>
          <literal>"safe"</literal>
         </para>
         <para>
          Can be a boolean or integer, defaults to &false;.  If &false;, the 
          program continues executing without waiting for a database response. 
          If &true;, the program will wait for the database response and throw a
          <classname>MongoCursorException</classname> if the insert did not 
          succeed.  
         </para>
         <para>
          If you are using replication and the master has changed, using "safe" 
          will make the driver disconnect from the master, throw an exception, 
          and attempt to find a new master on the next operation (your 
          application must decide whether or not to retry the operation on the
          new master). 
         </para>
         <para>
          If you <emphasis>do not</emphasis> use "safe" with a replica set and 
          the master changes, there will be no way for the driver to know about 
          the change so it will continuously and silently fail to write.
         </para>
         <para>
          If <literal>safe</literal> is an integer, will replicate the
          insert to that many machines before returning success (or throw an
          exception if the replication times out, see wtimeout).  This overrides
          the w variable set on the collection.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"fsync"</literal>
         </para>
         <para>
          Boolean, defaults to &false;.  Forces the insert to be synced to 
          disk before returning success.  If &true;, a safe insert is implied
          and will override setting <literal>safe</literal> to &false;.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"timeout"</literal>
         </para>
         <para>
          Integer, defaults to <literal>MongoCursor::$timeout</literal>.  If 
          "safe" is set, this sets how long (in milliseconds) for the client to
          wait for a database response.  If the database does not respond within
          the timeout period, a <classname>MongoCursorTimeoutException</classname>
          will be thrown.
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   If <parameter>safe</parameter> was set, returns an array containing the
   status of the insert.  Otherwise, returns a boolean representing if the
   array was not empty (an empty array will not be inserted).
  </para>
  <para>
   If an array is returned, the following keys can be present:
   <variablelist>
    <varlistentry>
     <term>
      <parameter>ok</parameter>
     </term>
     <listitem>
      <para>
       This should almost be 1 (unless last_error itself failed).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>err</parameter>
     </term>
     <listitem>
      <para>
       If this field is non-null, an error occurred on the previous operation.
       If this field is set, it will be a string describing the error that
       occurred. 
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>code</parameter>
     </term>
     <listitem>
      <para>
       If a database error occurred, the relevant error code will be passed
       back to the client. 
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>errmsg</parameter>
     </term>
     <listitem>
      <para>
       This field is set if something goes wrong with a database command. It
       is coupled with <literal>ok</literal> being 0. For example, if
       <literal>w</literal> is set and times out, errmsg will be set to "timed
       out waiting for slaves" and <literal>ok</literal> will be 0.  If this
       field is set, it will be a string describing the error that occurred. 
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>n</parameter>
     </term>
     <listitem>
      <para>
       If the last operation was an insert, an update or a remove, the number
       of objects affected will be returned. 
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>wtimeout</parameter>
     </term>
     <listitem>
      <para>
       If the previous option timed out waiting for replication. 
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>waited</parameter>
     </term>
     <listitem>
      <para>
       How long the operation waited before timing out. 
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>wtime</parameter>
     </term>
     <listitem>
      <para>
       If <literal>w</literal> was set and the operation succeeded, how long it took to
       replicate to <literal>w</literal> servers. 
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>upserted</parameter>
     </term>
     <listitem>
      <para>
       If an upsert occured, this field will contain the new record's
       <literal>_id</literal> field. For upserts, either this field or
       <literal>updatedExisting</literal> will be present (unless an error
       occurred). 
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>updatedExisting</parameter>
     </term>
     <listitem>
      <para>
       If an upsert updated an existing element, this field will be true. For
       upserts, either this field or upserted will be present (unless an error
       occurred). 
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Throws <classname>MongoCursorException</classname> if the "safe" option is 
   set and the insert fails. (Version 1.0.1+)
  </para>
  <para>
   Throws <classname>MongoCursorTimeoutException</classname> if the "safe" 
   option is set and the operation takes longer than 
   <varname>MongoCursor::$timeout</varname> milliseconds to complete.  This does
   not kill the operation on the server, it is a client-side timeout.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1.0.5</entry>
       <entry>
        Changed second parameter to an array of options.  Pre-1.0.5, the
        second parameter was a boolean indicating the "safe" option.
       </entry>
      </row>
      <row>
       <entry>1.0.9</entry>
       <entry>
        Added ability to pass integers to "safe" options (only accepted booleans
        before) and added "fsync" option.
       </entry>
      </row>
      <row>
       <entry>1.0.9</entry>
       <entry>
        The return type was changed to be an array containing error
        information if the "safe" option is used, otherwise it is a boolean as
        before.
       </entry>
      </row>
      <row>
       <entry>1.0.11</entry>
       <entry>
        Disconnects on "not master" errors if "safe" is set.
       </entry>
      </row>
      <row>
       <entry>1.2.0</entry>
       <entry>
        Added timeout option.
       </entry>
      </row>
      <row>
       <entry>1.3.0</entry>
       <entry>
        The <parameter>options</parameter> parameter does no longer accept
        just a boolean to signify a safe insert. Instead, this now has to be done
        with <literal>array('safe' => true)</literal>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>MongoCollection::insert</function> _id example</title>
   <para>
    Inserting an object will add an _id field to it, unless it is passed by reference.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo(); 
$db = $m->selectDB('test');
$collection = new MongoCollection($db, 'phpmanual');

$a = array('x' => 12);
$collection->insert($a);
var_dump($a);

$b = array('x' => 12);
$ref = &$b;
$collection->insert($ref);
var_dump($ref);

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(2) {
  ["x"]=>
  int(12)
  ["_id"]=>
  object(MongoId)#4 (0) {
  }
}
array(12) {
  ["x"]=>
  int(1)
}
]]>
   </screen>
  </example>

  <example>
   <title><function>MongoCollection::insert</function> safe example</title>
   <para>
    This example shows inserting two elements with the same _id, which causes 
    a <classname>MongoCursorException</classname> to be thrown, as 
    <parameter>safe</parameter> was set.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$person = array("name" => "Joe", "age" => 20);
$collection->insert($person, true);

// now $person has an _id field, so if we save it 
// again, we will get an exception
try {
    $collection->insert($person, true);
} catch(MongoCursorException $e) {
    echo "Can't save the same person twice!\n";
}

?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>MongoCollection::batchInsert</function></member>
   <member><function>MongoCollection::update</function></member>
   <member><function>MongoCollection::find</function></member>
   <member><function>MongoCollection::remove</function></member>
   <member>MongoDB core docs on <link xlink:href="&url.mongodb.dochub.insert;">insert</link>.</member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
