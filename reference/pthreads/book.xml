<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<book xml:id="book.pthreads" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>pthreads</title>
 <titleabbrev>pthreads</titleabbrev>

 <preface xml:id="intro.pthreads">
  &reftitle.intro;
  <para>
 pthreads is an Object Orientated API that allows user-land multi-threading in PHP. 
 It includes all the tools you need to create multi-threaded applications targeted at the Web or the Console. 
 PHP applications can create, read, write, execute and synchronize with Threads, Workers and Stackables.
  </para>
  <para>
 A Thread Object:
 The user can implement a thread by extending the Thread declaration provided by pthreads.
 Any members can be written and read by any context with a reference to the Thread, any context can also execute any public and protected methods. 
 The run method of the implementation is executed in a separate thread when the start method of the implementation is called from the context ( that's Thread or Process ) that created it. 
 Only the context that creates a thread can start and join with it.
  </para>
  <para>
 A Worker Object:
 A Worker Thread has a persistent state, and will be available from the call to start until the object goes out of scope, or is explicitly shutdown. 
 Any context with a reference can pass objects of type Stackable to the Worker which will be executed by the Worker in a separate Thread. 
 The run method of a Worker is executed before any objects on the stack, such that it can initialize resources that the Stackables to come may need.
  </para>
  <para>
 A Stackable Object:
 A Stackable Object can read/write and execute the Worker ( $this->worker ) during the execution of it's run method. 
 Additionally, any context with a reference to the Stackable can read, write and execute it's methods before during and after execution.
  </para>
  <para>
 Synchronization:
 All of the objects that pthreads creates have built in synchronization in the form of ::wait and ::notify. 
 Calling ::wait on an object will cause the context to wait for another context to call ::notify on the same object. 
 This allows for powerful synchronization between Threaded Objects in PHP.
  </para>
  <para>
 Wait, Threaded Objects ?
 A Stackable, Thread or Worker can be thought of, and should be used as a Threaded stdClass: A Thread, Worker and Stackable all behave in the same way in any context with a reference.
 Any objects that are intended for use in the multi-threaded parts of your application should extend the Stackable, Thread or Worker declaration. 
 Which means they must implement run but may not ever be executed; it will often be the case that Objects being used in a multi-threaded environment are intended for execution. 
 Doing so means any context ( that's Thread/Worker/Stackable/Process ) with a reference can read, write and execute the members of the Threaded Object before, during, and after execution.
  </para>
  <para>
 Method Modifiers:
 The protected methods of Threaded Objects are protected by pthreads, such that only one context may call that method at a time. 
 The private methods of Threaded Objects can only be called from within the Threaded Object during execution.
  </para>
  <para>
 Data Storage:
 As a rule of thumb, any data type that can be serialized can be used as a member of a Threaded object, it can be read and written from any context with a reference to the Threaded Object. 
 Not every type of data is stored serially, basic types are stored in their true form. 
 Complex types, Arrays, and Objects that are not Threaded are stored serially; they can be read and written to the Threaded Object from any context with a reference.
 With the exception of Threaded Objects any reference used to set a member of a Threaded Object is separated from the reference in the Threaded Object; 
 the same data can be read directly from the Threaded Object at any time by any context with a reference to the Threaded Object.
  </para>
  <note>
   <para>
 Resources:
 The extensions and functionality that define resources in PHP are completely unprepared for this kind of environment; pthreads makes provisions for Resources to be shared among contexts, however, for most types of resource it should be considered unsafe. Extreme caution and care should be used when sharing resources among contexts.
   </para>
  </note>
  <caution>
   <para>
 pthreads was, and is, an experiment with pretty good results. Any of its limitations or features may change at any time; that is the nature of experimentation. 
 It's limitations - often imposed by the implementation - exist for good reason; the aim of pthreads is to provide a useable solution to multi-tasking in PHP at any level. 
 In the environment which pthreads executes, some restrictions and limitations are necessary in order to provide a stable environment.
   </para>
  </caution>
 </preface>

 &reference.pthreads.setup;
 &reference.pthreads.thread;
 &reference.pthreads.worker;
 &reference.pthreads.stackable;
 &reference.pthreads.modifiers;
 &reference.pthreads.mutex;
 &reference.pthreads.cond;

</book>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
