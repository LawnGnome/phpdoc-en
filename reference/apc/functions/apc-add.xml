<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.apc-add" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>apc_add</refname>
  <refpurpose>
   Cache a new variable in the data store
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>apc_add</methodname>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>ttl</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <type>array</type><methodname>apc_add</methodname>
   <methodparam><type>array</type><parameter>values</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>unused</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>ttl</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Caches a variable in the data store, only if it's not already stored.
  </para>
  <note>
   <simpara>
    Unlike many other mechanisms in PHP, variables stored using
    <function>apc_add</function> will persist between requests (until the
    value is removed from the cache).
   </simpara>
  </note>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>key</parameter></term>
     <listitem>
      <para>
       Store the variable using this name. <parameter>key</parameter>s are
       cache-unique, so attempting to use <function>apc_add</function> to
       store data with a key that already exists will not overwrite the
       existing data, and will instead return &false;. (This is the only
       difference between <function>apc_add</function> and
       <function>apc_store</function>.)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       The variable to store
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>ttl</parameter></term>
     <listitem>
      <para>
       Time To Live; store <parameter>var</parameter> in the cache for
       <parameter>ttl</parameter> seconds. After the
       <parameter>ttl</parameter> has passed, the stored variable will be
       expunged from the cache (on the next request). If no <parameter>ttl</parameter>
       is supplied (or if the <parameter>ttl</parameter> is
       <literal>0</literal>), the value will persist until it is removed from
       the cache manually, or otherwise fails to exist in the cache (clear,
       restart, etc.).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>values</parameter></term>
     <listitem>
      <para>
       Names in key, variables in value.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
   Second syntax returns array with error keys.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>A <function>apc_add</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
$bar = 'BAR';
apc_add('foo', $bar);
var_dump(apc_fetch('foo'));
echo "\n";
$bar = 'NEVER GETS SET';
apc_add('foo', $bar);
var_dump(apc_fetch('foo'));
echo "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(3) "BAR"
string(3) "BAR"
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>apc_store</function></member>
    <member><function>apc_fetch</function></member>
    <member><function>apc_delete</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
