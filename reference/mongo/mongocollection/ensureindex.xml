<?xml version="1.0" encoding="utf-8"?>

<!-- $Revision$ -->
<refentry xml:id="mongocollection.ensureindex" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::ensureIndex</refname>
  <refpurpose>
   Creates an index on the given field(s), or does nothing if the index 
   already exists
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>MongoCollection::ensureIndex</methodname>
   <methodparam><type>string|array</type><parameter>key|keys</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
  <para>
   This method creates an index on the collection and the specified fields.
   The key specification can either be just a single field name as string, or an
   array containing one or more field names with their sort direction.
  </para>
 </refsect1>

 <refsect1 role="parameters"> 
  &reftitle.parameters; 
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>keys</parameter>
     </term>
     <listitem>
      <para>
       Field or fields to use as index.
      </para>
     </listitem>
    </varlistentry>   
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       This parameter is an associative array of the form 
       <literal>array("optionname" => &lt;boolean&gt;, ...)</literal>. Currently 
       supported options are: 
       <itemizedlist>
        <listitem>
         <para>
          <literal>"unique"</literal>
         </para>
         <para>
          Create a unique index.
         </para>
         <warning>
          <para>
           A unique index cannot be created on a field if multiple existing documents do
           not contain the field.  The field is effectively &null; for these documents 
           and thus already non-unique.
          </para>
         </warning>
        </listitem>
        <listitem>
         <para>
          <literal>"dropDups"</literal>
         </para>
         <para>
          If a unique index is being created and duplicate values exist, drop
          all but one duplicate value.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"background"</literal>
         </para>
         <para>
          If you are using MongoDB version 1.3.2+, you can create indexes in the
          background while other operations are taking place.  By default, index
          creation happens synchronously.  If you specify &true; with this 
          option, index creation will be asynchronous.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"safe"</literal>
         </para>
         <para>
          Starting with driver version 1.0.4, you can specify a boolean value 
          for checking if the index creation succeeded.  The driver will throw
          a MongoCursorException if index creation failed.
         </para>
         <para>
          If you are using replication and the master has changed, using "safe" 
          will make the driver disconnect from the master, throw and exception, 
          and attempt to find a new master on the next operation (your 
          application must decide whether or not to retry the operation on the
          new master). 
         </para>
         <para>
          If you <emphasis>do not</emphasis> use "safe" with a replica set and 
          the master changes, there will be no way for the driver to know about 
          the change so it will continuously and silently fail to write.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"name"</literal>
         </para>
         <para>
          Starting with driver version 1.0.5 you can specify an index name.
          This can be useful if you are indexing many keys and Mongo complains
          about the index name being too long.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"timeout"</literal>
         </para>
         <para>
          Integer, defaults to <literal>MongoCursor::$timeout</literal>.  If 
          "safe" is set, this sets how long (in milliseconds) for the client to
          wait for a database response.  If the database does not respond within
          the timeout period, a <classname>MongoCursorTimeoutException</classname>
          will be thrown.
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns &true;.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1.0.2</entry>
       <entry>
        Changed "options" parameter from boolean to array.  Pre-1.0.2, the
        second parameter was an optional boolean value specifying a unique 
        index.
       </entry>
      </row>
      <row>
       <entry>1.0.11</entry>
       <entry>
        "safe" will trigger master failover, if necessary.
       </entry>
      </row>
      <row>
       <entry>1.0.11</entry>
       <entry>
        <classname>MongoException</classname> will be thrown if index name
        (either generated or set) is longer than 128 bytes.
       </entry>
      </row>
      <row>
       <entry>1.2.0</entry>
       <entry>
        Added timeout option.
       </entry>
      </row>
      <row>
       <entry>1.3.0</entry>
       <entry>
        The <parameter>options</parameter> parameter does no longer accept
        just a boolean to signify a unique index. Instead, this now has to be done
        with <literal>array('unique' => true)</literal>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Throws <classname>MongoException</classname> if the index name is longer than
   128 bytes. (Version 1.0.11+)
  </para>
  <para>
   Throws <classname>MongoCursorException</classname> if the "safe" option is 
   set and the index creation fails.
  </para>
  <para>
   Throws <classname>MongoCursorTimeoutException</classname> if the "safe" 
   option is set and the operation takes longer than 
   <varname>MongoCursor::$timeout</varname> milliseconds to complete.  This does
   not kill the operation on the server, it is a client-side timeout.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>MongoCollection::ensureIndex</function> example</title>
   <programlisting role="php">
<![CDATA[
<?php

$c = new MongoCollection($db, 'foo');

// create an index on 'x' ascending
$c->ensureIndex('x');

// create an index on 'y' ascending
$c->ensureIndex(array('y' => 1));

// create an index on 'z' ascending and 'zz' descending
$c->ensureIndex(array('z' => 1, 'zz' => -1));

// create a unique index on 'x'
$c->ensureIndex(array('x' => 1), array("unique" => true));

?>
]]>
   </programlisting>
  </example>
  <example>
   <title>Drop duplicates example</title>
   <programlisting role="php">
<![CDATA[
<?php

$collection->insert(array("username" => "joeschmoe"));
$collection->insert(array("username" => "joeschmoe"));

/*
 * index creation fails, you can't create a unique index on a key with 
 * non-unique values
 */
$collection->ensureIndex(array("username" => 1), array("unique" => 1));

/*
 * index creation succeeds: one of the documents is removed from the collection
 */
$collection->ensureIndex(array("username" => 1), array("unique" => 1, "dropDups" => 1));

/* 
 * now we have a unique index, more inserts with the same username (such as the
 * one below) will fail
 */
$collection->insert(array("username" => "joeschmoe"));

?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Geospatial Indexing</title>
   <para>
    Mongo supports geospatial indexes, which allow you to search for documents
    near a given location or within a shape.  For example, to create a 
    geospatial index on the "loc" field:
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$collection->ensureIndex(array("loc" => "2d"));

?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   MongoDB core docs on 
   <link xlink:href="&url.mongodb.dochub.indexes;">vanilla indexes</link> and 
   <link xlink:href="&url.mongodb.dochub.geo;">geospatial indexes</link>.
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
