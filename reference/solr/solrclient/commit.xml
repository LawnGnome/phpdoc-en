<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="solrclient.commit" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>SolrClient::commit</refname>
  <refpurpose>Finalizes all add/deletes made to the index</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>SolrUpdateResponse</type><methodname>SolrClient::commit</methodname>
   <methodparam choice="opt"><type>int</type><parameter>maxSegments</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>softCommit</parameter><initializer>false</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>waitFlush</parameter><initializer>true</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>expungeDeletes</parameter><initializer>true</initializer></methodparam>
  </methodsynopsis>
  <para>
   This method finalizes all add/deletes made to the index.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>maxSegments</parameter></term>
     <listitem>
      <para>
       Does nothing, kept for backward compatibility
      </para>
      <warning>
	   <para>
	    DEPRECATED: will be removed in the next release.
	   </para>
	  </warning>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>softCommit</parameter></term>
     <listitem>
      <para>
       This will refresh the 'view' of the index in a more performant manner, but without "on-disk" guarantees. (Solr4.0+)
      </para>
      <para>
          A soft commit is much faster since it only makes index changes visible and does not fsync index files or write a new index descriptor. 
          If the JVM crashes or there is a loss of power, changes that occurred after the last hard commit will be lost. 
          Search collections that have near-real-time requirements (that want index changes to be quickly visible to searches) will want to soft commit often but hard commit less frequently. 
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>waitFlush</parameter></term>
     <listitem>
      <para>
       Block until index changes are flushed to disk.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>expungeDeletes</parameter></term>
     <listitem>
      <para>
       Merge segments with deletes away. (Solr1.4+)
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns a SolrUpdateResponse object on success or throws a SolrClientException on failure.
  </para>
 </refsect1>
 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
        PECL Solr &gt;= 2.0 only supports Solr Server &gt;= 4.0 
   </para>
   <para>
        Prior to PECL Solr 2.0 this method used to accept these arguments "int $maxSegments, bool $waitFlush, bool $waitSearcher".
   </para>
  </warning>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>SolrClient::optimize</methodname></member>
    <member><methodname>SolrClient::rollback</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
