<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id='function.xslt-set-scheme-handlers' xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>xslt_set_scheme_handlers</refname>
  <refpurpose>Set the scheme handlers for the <acronym>XSLT</acronym> processor</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>xslt_set_scheme_handlers</methodname>
   <methodparam><type>resource</type><parameter>xh</parameter></methodparam>
   <methodparam><type>array</type><parameter>handlers</parameter></methodparam>
  </methodsynopsis>
  <para>
   Registers the scheme handlers (XPath handlers) for the document.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    &xslt.parameter.xh;
    <varlistentry>
     <term><parameter>handlers</parameter></term>
     <listitem>
      <para>
       An array with the following keys: <literal>"get_all"</literal>, 
       <literal>"open"</literal>, <literal>"get"</literal>, <literal>"put"</literal>,
       and <literal>"close"</literal>.
      </para>
      <para>
       Every entry must be a function name or an array in the following
       format: <literal>array($obj, "method")</literal>.
      </para>
      <para>
       Note that the given array does not need to contain all of the
       different scheme handler elements (although it can), but it only needs
       to conform to the <literal>"handler" =&gt; "function"</literal> format
       described above.
      </para>
      <para>
       Each of the individual scheme handler functions called are in the
       formats below:
       <screen>
<![CDATA[
string   get_all(resource processor, string scheme, string rest)
resource open(resource processor, string scheme, string rest)
int      get(resource processor, resource fp, string &data)
int      put(resource processor, resource fp, string data)
void     close(resource processor, resource fp)
]]>
       </screen>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>xslt_set_scheme_handlers</function> example</title>
    <para>
     For example, here is an implementation of the "file_exists()" PHP function.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

// Definition of the handler
function mySchemeHandler($processor, $scheme, $rest)
{
    $rest = substr($rest,1);    // to remove the first / automatically added by the engine
    if ($scheme == 'file_exists') {
        // result is embedded in a small xml string
        return '<?xml version="1.0" encoding="UTF-8"?><root>' . (file_exists($rest) ? 'true' : 'false') . '</root>';
    }
}

$SchemeHandlerArray = array('get_all' => 'mySchemeHandler');

// Start the engine
$params = array();
$xh = xslt_create();

xslt_set_scheme_handlers($xh, $SchemeHandlerArray);

$result = xslt_process($xh, "myFile.xml", "myFile.xsl", NULL, array(), $params);
xslt_free($xh);

echo $result;

?>
]]>
    </programlisting>
    <para>
     Then, inside the stylesheet, you can test whether a certain file exists with:
    </para>
    <programlisting role="xml">
<![CDATA[
<xsl:if test="document('file_exists:anotherXMLfile.xml')/root='true'">
 <!-- The file exist -->
</xsl:if>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>xslt_set_scheme_handler</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
