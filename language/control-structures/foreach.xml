<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<sect1 xml:id="control-structures.foreach" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>foreach</literal></title>
 <?phpdoc print-version-for="foreach"?>
 <para>
  The <literal>foreach</literal> construct simply gives an easy way to
  iterate over arrays. <literal>foreach</literal> works only on arrays (and objects), and
  will issue an error when you try to use it on a variable with a different
  data type or an uninitialized variable. There are two syntaxes; the
  second is a minor but useful extension of the first:
  <informalexample>
   <programlisting>
<![CDATA[
foreach (array_expression as $value)
    statement
foreach (array_expression as $key => $value)
    statement
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  The first form loops over the array given by
  <literal>array_expression</literal>. On each loop, the value of
  the current element is assigned to <literal>$value</literal> and
  the internal array pointer is advanced by one (so on the next
  loop, you'll be looking at the next element).
 </simpara>
 <simpara>
  The second form does the same thing, except that the current
  element's key will be assigned to the variable
  <literal>$key</literal> on each loop.
 </simpara>
 <simpara>
  As of PHP 5, it is possible to
  <link linkend="language.oop5.iterations">customize objects iteration</link> too.
 </simpara>
 <para>
  <note>
   <para>
    When <literal>foreach</literal> first starts executing, the
    internal array pointer is automatically reset to the first element
    of the array. This means that you do not need to call
    <function>reset</function> before a <literal>foreach</literal>
    loop.
   </para>
  </note>
 </para>
 <para>
  <note>
   <para>
    <literal>foreach</literal> operates on a copy of the array values unless 
    <literal>$value</literal> is <link linkend="language.references">referenced</link>
    by preceding it with &amp;.  <literal>foreach</literal>
    has some side effects on the array pointer. Don't rely on the array
    pointer during or after the <literal>foreach</literal> without resetting it.
   </para>
  </note>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$arr = array(1, 2, 3, 4);
foreach ($arr as &$value) {
    $value = $value * 2;
}
// $arr is now array(2, 4, 6, 8)
unset($value); // break the reference with the last element
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Referencing <literal>$value</literal> is only possible if the iterated array can be 
  referenced (i.e. if it is a variable). The following code won't work:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
foreach (array(1, 2, 3, 4) as &$value) {
    $value = $value * 2;
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <warning>
  <para>
   Reference of a <literal>$value</literal> and the last array element
   remain even after the <literal>foreach</literal> loop. It is recommended
   to destroy it by <function>unset</function>.
  </para>
 </warning>
 <para>
  <note>
   <para>
    <literal>foreach</literal> does not support the ability to
    suppress error messages using '@'.
   </para>
  </note>
 </para>
 <para>
  You may have noticed that the following are functionally
  identical:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$arr = array("one", "two", "three");
reset($arr);
while (list(, $value) = each($arr)) {
    echo "Value: $value<br />\n";
}

foreach ($arr as $value) {
    echo "Value: $value<br />\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  The following are also functionally identical:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$arr = array("one", "two", "three");
reset($arr);
while (list($key, $value) = each($arr)) {
    echo "Key: $key; Value: $value<br />\n";
}

foreach ($arr as $key => $value) {
    echo "Key: $key; Value: $value<br />\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Some more examples to demonstrate usages:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
/* foreach example 1: value only */

$a = array(1, 2, 3, 17);

foreach ($a as $v) {
    echo "Current value of \$a: $v.\n";
}

/* foreach example 2: value (with its manual access notation printed for illustration) */

$a = array(1, 2, 3, 17);

$i = 0; /* for illustrative purposes only */

foreach ($a as $v) {
    echo "\$a[$i] => $v.\n";
    $i++;
}

/* foreach example 3: key and value */

$a = array(
    "one" => 1,
    "two" => 2,
    "three" => 3,
    "seventeen" => 17
);

foreach ($a as $k => $v) {
    echo "\$a[$k] => $v.\n";
}

/* foreach example 4: multi-dimensional arrays */
$a = array();
$a[0][0] = "a";
$a[0][1] = "b";
$a[1][0] = "y";
$a[1][1] = "z";

foreach ($a as $v1) {
    foreach ($v1 as $v2) {
        echo "$v2\n";
    }
}

/* foreach example 5: dynamic arrays */

foreach (array(1, 2, 3, 4, 5) as $v) {
    echo "$v\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
