<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<sect1 xml:id="language.types.float">
 <title>Floating point numbers</title>

 <para>
  Floating point numbers (also known as "floats", "doubles", or "real numbers")
  can be specified using any of the following syntaxes:
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php
$a = 1.234; 
$b = 1.2e3; 
$c = 7E-10;
?>
]]>
  </programlisting>
 </informalexample>

 <para>
  Formally:
 </para>

 <informalexample>
  <programlisting>
<![CDATA[
LNUM          [0-9]+
DNUM          ([0-9]*[\.]{LNUM}) | ({LNUM}[\.][0-9]*)
EXPONENT_DNUM [+-]?(({LNUM} | {DNUM}) [eE][+-]? {LNUM})
]]>
  </programlisting>
 </informalexample>

 <para>
  The size of a float is platform-dependent, although a maximum of ~1.8e308 with
  a precision of roughly 14 decimal digits is a common value (the 64 bit IEEE
  format).
 </para>

 <warning xml:id="warn.float-precision">
  <title>Floating point precision</title>

  <para>
   Floating point numbers have limited precision. Although it depends on the
   system, PHP typically uses the IEEE 754 double precision format, which will
   give a maximum relative error due to rounding in the order of 1.11e-16.
   Non elementary arithmetic operations may give larger errors, and, of course,
   error propagation must be considered when several operations are
   compounded.
  </para>
  
  <para>
   Additionally, rational numbers that are exactly representable as floating
   point numbers in base 10, like <literal>0.1</literal> or
   <literal>0.7</literal>, do not have an exact representation as floating
   point numbers in base 2, which is used internally, no matter the size of
   the mantissa. Hence, they cannot be converted into their internal binary
   counterparts without a small loss of precision. This can lead to confusing
   results: for example, <literal>floor((0.1+0.7)*10)</literal> will usually
   return <literal>7</literal> instead of the expected <literal>8</literal>,
   since the internal representation will be something like
   <literal>7.9999999999999991118...</literal>.
  </para>

  <para>
   So never trust floating number results to the last digit, and never compare
   floating point numbers for equality. If higher precision is necessary,
   the <link linkend="ref.bc">arbitrary precision math functions</link> and
   <link linkend="ref.gmp">gmp</link> functions are available.
  </para>
 </warning>

 <sect2 xml:id="language.types.float.casting">
  <title>Converting to float</title>
  
  <para>
   For information on converting <type>string</type>s to <type>float</type>, see
   <link linkend="language.types.string.conversion">String conversion to
   numbers</link>. For values of other types, the conversion is performed by
   converting the value to <type>integer</type> first and then to
   <type>float</type>. See
   <link linkend="language.types.integer.casting">Converting to integer</link>
   for more information. As of PHP 5, a notice is thrown if an
   <type>object</type> is converted to <type>float</type>.
  </para>

 </sect2>
 
 <sect2 xml:id="language.types.float.nan">
  <title>NaN</title>
  <para>
   Some numeric operations can result in a value represented by the constant
   <constant>NAN</constant>. This result represents an undefined or
   unrepresentable value in floating-point calculations. Any loose or strict
   comparisons of this value against any other value, including itself, will
   have a result of &false;.
  </para>
  <para>
   Because <constant>NAN</constant> represents any number of different values,
   <constant>NAN</constant> should not be compared to other values, including
   itself, and instead should be checked for using <function>is_nan</function>.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
